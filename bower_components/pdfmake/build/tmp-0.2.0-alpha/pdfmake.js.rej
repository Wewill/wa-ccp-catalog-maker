--- pdfmake.js.orig	2019-10-19 15:56:59.551856722 +0200
+++ pdfmake.js	2020-11-22 11:04:53.543558008 +0100
@@ -18483,6 +18483,18 @@
 
 	this.pageMargins = pageMargins;
 
+// start add @patch: concipio : margin dynamics
+
+	this.pageMarginsFkt = null;
+
+  if (typeof this.pageMargins === 'function'){
+   this.pageMarginsFkt = this.pageMargins;
+  }
+
+  if (this.pageMarginsFkt){
+   this.pageMargins = this.pageMarginsFkt(1);
+  }
+// end add
 	this.x = pageMargins.left;
 	this.availableWidth = pageSize.width - pageMargins.left - pageMargins.right;
 	this.availableHeight = 0;
@@ -18606,9 +18618,34 @@
 };
 
 DocumentContext.prototype.initializePage = function () {
+/* @patch: concipio : margin dynamics
 	this.y = this.pageMargins.top;
 	this.availableHeight = this.getCurrentPage().pageSize.height - this.pageMargins.top - this.pageMargins.bottom;
 	this.pageSnapshot().availableWidth = this.getCurrentPage().pageSize.width - this.pageMargins.left - this.pageMargins.right;
+*/
+
+//	console.log('DocumentContext.prototype.initializePage', this.x, this.getCurrentPage());
+	var marginLeft = this.getCurrentPage().pageMargins.left;
+	var marginRight = this.getCurrentPage().pageMargins.right;
+	var cropMarksLength = this.pageMargins.cropMarksLength || 0;
+	var oldx = this.x;
+	if (this.x != undefined) {
+		if (this.getCurrentPage().pageMargins.initialized == undefined) {
+			if (this.x > marginLeft)
+	//			this.x = this.x + marginLeft + cropMarksLength;
+				this.x = this.x - marginRight + cropMarksLength;
+			else if (this.x < marginLeft)
+				this.x = this.x + marginLeft - cropMarksLength;
+		}
+	} else {
+		this.x = this.getCurrentPage().pageMargins.left; // @patch: margins dynmics add by hobbsi
+	}
+	this.getCurrentPage().pageMargins.initialized = true;
+//	console.log('Y : ', this.y, this.getCurrentPage().pageMargins.top);
+	this.y = this.getCurrentPage().pageMargins.top;
+	this.availableHeight = this.getCurrentPage().pageSize.height - this.getCurrentPage().pageMargins.top - this.getCurrentPage().pageMargins.bottom;
+	this.pageSnapshot().availableWidth = this.getCurrentPage().pageSize.width - this.getCurrentPage().pageMargins.left - this.getCurrentPage().pageMargins.right ;
+//	console.log('left ', marginLeft, ' // right ', marginRight, ' // this.x', oldx , "=>", this.x, '//', this.pageSnapshot().availableWidth,  this.getCurrentPage().pageSize);
 };
 
 DocumentContext.prototype.pageSnapshot = function () {
@@ -18695,6 +18732,7 @@
 
 
 DocumentContext.prototype.moveToNextPage = function (pageOrientation) {
+//	console.log('@concipio DocumentContext.prototype.moveToNextPage');
 	var nextPageIndex = this.page + 1;
 
 	var prevPage = this.page;
@@ -18702,6 +18740,8 @@
 
 	var createNewPage = nextPageIndex >= this.pages.length;
 	if (createNewPage) {
+//		console.log('@concipio DocumentContext.prototype.moveToNextPage', 'createNewPage');
+
 		var currentAvailableWidth = this.availableWidth;
 		var currentPageOrientation = this.getCurrentPage().pageSize.orientation;
 
@@ -18712,10 +18752,11 @@
 			this.availableWidth = currentAvailableWidth;
 		}
 	} else {
+//		console.log('@concipio DocumentContext.prototype.moveToNextPage', '! createNewPage');
 		this.page = nextPageIndex;
 		this.initializePage();
 	}
-
+//console.log('currentAvailableWidth', currentAvailableWidth);
 	return {
 		newPageCreated: createNewPage,
 		prevPage: prevPage,
@@ -18730,6 +18771,22 @@
 	this.pages.push(page);
 	this.backgroundLength.push(0);
 	this.page = this.pages.length - 1;
+
+// start add @patch: concipio : margin dynamics
+
+	if (typeof this.pageMargins === 'function'){
+			 this.pageMarginsFkt = this.pageMargins;
+	}
+
+	if (this.pageMarginsFkt){
+			 this.pageMargins = this.pageMarginsFkt(this.pages.length);
+	}
+
+	page.pageMargins = Object.assign( {} , this.pageMargins );
+
+// end add
+
+
 	this.initializePage();
 
 	this.tracker.emit('pageAdded');
@@ -18746,6 +18803,7 @@
 };
 
 DocumentContext.prototype.getCurrentPosition = function () {
+/* @patch: margins dynamics
 	var pageSize = this.getCurrentPage().pageSize;
 	var innerHeight = pageSize.height - this.pageMargins.top - this.pageMargins.bottom;
 	var innerWidth = pageSize.width - this.pageMargins.left - this.pageMargins.right;
@@ -18760,6 +18818,24 @@
 		verticalRatio: ((this.y - this.pageMargins.top) / innerHeight),
 		horizontalRatio: ((this.x - this.pageMargins.left) / innerWidth)
 	};
+*/
+	var pageSize = this.getCurrentPage().pageSize;
+	var innerHeight = pageSize.height - this.getCurrentPage().pageMargins.top - this.getCurrentPage().pageMargins.bottom;
+	var innerWidth = pageSize.width - this.getCurrentPage().pageMargins.left - this.getCurrentPage().pageMargins.right;
+
+//	console.log('@concipio DocumentContext.prototype.getCurrentPosition', this.x);
+
+	return {
+		pageMargins: this.getCurrentPage().pageMargins,
+		pageNumber: this.page + 1,
+		pageOrientation: pageSize.orientation,
+		pageInnerHeight: innerHeight,
+		pageInnerWidth: innerWidth,
+		left: this.x,
+		top: this.y,
+		verticalRatio: ((this.y - this.getCurrentPage().pageMargins.top) / innerHeight),
+		horizontalRatio: ((this.x - this.getCurrentPage().pageMargins.left) / innerWidth)
+	};
 };
 
 function bottomMostContext(c1, c2) {
@@ -60164,11 +60240,13 @@
 
 	for (var pageIndex = 0, l = pages.length; pageIndex < l; pageIndex++) {
 		this.writer.context().page = pageIndex;
-
 		var node = nodeGetter(pageIndex + 1, l, this.writer.context().pages[pageIndex].pageSize);
 
 		if (node) {
-			var sizes = sizeFunction(this.writer.context().getCurrentPage().pageSize, this.pageMargins);
+//			var sizes = sizeFunction(this.writer.context().getCurrentPage().pageSize, this.writer.context().getCurrentPage().pageMargins);
+// @patch: concipio : margin dynamics			var sizes = sizeFunction(this.writer.context().getCurrentPage().pageSize, this.pageMargins);
+// @patch: concipio : bug header margins ignores
+			var sizes = { x: 0, y: 0, width: this.writer.context().pages[pageIndex].pageSize.width, height: this.writer.context().pages[pageIndex].pageSize.height };
 			this.writer.beginUnbreakableBlock(sizes.width, sizes.height);
 			node = this.docPreprocessor.preprocessDocument(node);
 			this.processNode(this.docMeasure.measureDocument(node));
@@ -60339,6 +60417,7 @@
 	decorateNode(node);
 
 	applyMargins(function () {
+//		console.log('@concipio LayoutBuilder.prototype.processNode', node);
 		var unbreakable = node.unbreakable;
 		if (unbreakable) {
 			self.writer.beginUnbreakableBlock();
@@ -60904,12 +60983,15 @@
 		}
 	}
 
+
 	if (node.id) {
 		if (this.nodeReferences[node.id]) {
+			/*
 			if (!this.nodeReferences[node.id]._pseudo) {
 				throw "Node id '" + node.id + "' already exists";
 			}
-
+*/
+//			console.log("@concipio: Node id '" + node.id + "' already exists");
 			this.nodeReferences[node.id]._nodeRef = this._getNodeForNodeRef(node);
 			this.nodeReferences[node.id]._textNodeRef = node;
 			this.nodeReferences[node.id]._pseudo = false;
@@ -63178,9 +63260,10 @@
 	if (context.availableHeight < height || !page) {
 		return false;
 	}
-
+//	console.log('@concipio ElementWriter.prototype.addLine', line.x, context.x);
 	line.x = context.x + (line.x || 0);
 	line.y = context.y + (line.y || 0);
+//	console.log('@concipio ElementWriter.prototype.addLine', line.x);
 
 	this.alignLine(line);
 
@@ -63384,7 +63467,6 @@
 	if (!useBlockXOffset && block.height > ctx.availableHeight) {
 		return false;
 	}
-
 	block.items.forEach(function (item) {
 		switch (item.type) {
 			case 'line':
